git  查看git命令
git --version   版本
git --help   帮助
clone      Clone a repository into a new directory
init       新建一个本地仓库
add        Add file contents to the index
mv         Move or rename a file, a directory, or a symlink
reset      Reset current HEAD to the specified state
rm         Remove files from the working tree and from the index examine the history and state  
bisect     Use binary search to find the commit that introduced a bug
grep       Print lines matching a pattern
log        Show commit logs
show       Show various types of objects
status     Show the working tree status  grow, mark and tweak your common history
branch     List, create, or delete branches
checkout   Switch branches or restore working tree files
commit     Record changes to the repository
diff       Show changes between commits, commit and working tree, etc
merge      Join two or more development histories together
rebase     Reapply commits on top of another base tip
tag        Create, list, delete or verify a tag object signed with GPGcollaborate (see also: git help workflows)
fetch      Download objects and refs from another repository
pull       Fetch from and integrate with another repository or a local branch
push       Update remote refs along with associated objects


$ mkdir git  创建文件夹  

$ pwd  显示目录

$ ls -ah  查看隐藏的文件[终端显示]

$ git config --list  查看配置列表选项

$ git config --local --list  查看本地配置列表选项

core.repositoryformatversion=0    
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.symlinks=false
core.ignorecase=true


$ git config --global --list  查看全局配置列表选项[C:\Users\艳少    .gitconfig]

$ git config --global user.name "Your Name"            设置全局变量
$ git config --global user.email "email@example.com"   设置全局变量

$ git config --system --list                   查看系统配置列表选项

$ git config --local  myconfig.named zhangsan  修改、添加配置


$ git add test.js   将文件添加到缓存区

$ git commit -m "说明"   提交文件

$ git status    查看当前的状态

$ git diff  查看已更改的内容

$  git log  查看日志

$  git log --pretty=oneline   一行一行的输出

$ git reset --hard HEAD^         上一个版本
$ git reset --hard  HEAD^^       上上一个版本 
$ git reset --hard  HEAD~100     往上100个版本 

$ git reset --hard 190269fed081f34a69cf12c54abae77a6e185876[id]  回到未来的某一个版本

$ git reflog  用来记录你的每一次命令

可以看见的就是工作区
影藏的.git文件夹包含git的版本库 [暂存区]
工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，
还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
 